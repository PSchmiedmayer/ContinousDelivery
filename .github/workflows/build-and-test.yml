#
# This source file is part of the Continous Delivery open source project
#
# SPDX-FileCopyrightText: 2022 Paul Schmiedmayer <paul.schmiedmayer@tum.de>
#
# SPDX-License-Identifier: MIT
#

name: Build and Test

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  workflow_call:

jobs:
  buildandtestiosapp:
    name: Build and Test iOS App
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v3
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    - name: Check Environment
      run: |
          xcodebuild -version
          swift --version
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Build and test
      run: bundler install && bundle exec fastlane test
  macosswiftpackages:
    name: macOS ${{ matrix.package }} ${{ matrix.configuration }}
    runs-on: macos-12
    defaults:
      run:
        working-directory: ./${{ matrix.package }}
    strategy:
      fail-fast: false
      matrix:
        package: [WebService, Shared]
        configuration: [debug, release]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-${{ hashFiles('Package.resolved') }}
    - name: Check Environment
      run: |
          xcodebuild -version
          swift --version
    - name: Release Build & Test
      if: matrix.configuration == 'release'
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug'
      run: swift test -c debug
  linuxswiftpackages:
    name: Linux ${{ matrix.package }} ${{ matrix.linux }} ${{ matrix.configuration }}
    container:
      image: swift:${{ matrix.linux }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{ matrix.package }}
    strategy:
      fail-fast: false
      matrix:
        package: [WebService, Shared]
        linux: [focal, amazonlinux2]
        configuration: [debug, release]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-${{ hashFiles('Package.resolved') }}
    - name: Check Environment
      run: |
          swift --version
    - name: Install apt-get Dependencies
      if: matrix.linux != 'amazonlinux2' && matrix.package == 'WebService'
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
    - name: Install yum Dependencies
      if: matrix.linux == 'amazonlinux2' && matrix.package == 'WebService'
      run: yum update -y && yum install -y sqlite-devel
    - name: Release Build & Test
      if: matrix.configuration == 'release'
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug'
      run: swift test -c debug
  dockercompose:
    name: Docker Compose Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Start containers
      run: docker-compose -f docker-compose-development.yml up -d --build
    - name: Test web service
      run: |
        sleep 5
        sh WebService/test.sh
    - name: Stop containers
      if: always()
      run: docker-compose down --remove-orphans